{
  "contractName": "MasterApeAdmin",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMasterApe",
          "name": "_masterApe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "name": "AddFarm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocationPercentage",
          "type": "uint256"
        }
      ],
      "name": "AddFixedPercentFarm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "name": "SetFarm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAllocationPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocationPercentage",
          "type": "uint256"
        }
      ],
      "name": "SetFixedPercentFarm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingMasterApeOwner",
          "type": "address"
        }
      ],
      "name": "SetPendingMasterApeOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SweepWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "name": "SyncFixedPercentFarm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFarmAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFarmAdmin",
          "type": "address"
        }
      ],
      "name": "TransferredFarmAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "MAX_FIXED_FARM_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "MAX_FIXED_FARM_PERCENTAGE_BUFFER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "farmAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fixedPercentFarmPids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getFixedPercentFarmFromPid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocationPercent",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "masterApe",
      "outputs": [
        {
          "internalType": "contract IMasterApe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "pendingMasterApeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFixedPercentFarmPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingMasterApeOwner",
          "type": "address"
        }
      ],
      "name": "setPendingMasterApeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptMasterApeOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "updateMasterApeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "batchUpdateMasterApePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "getDetailedPoolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAllocationPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAllocationPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolAllocationPercentMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolBananaPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolBananaPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolBananaPerMonth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "sweepTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFarmAdmin",
          "type": "address"
        }
      ],
      "name": "transferFarmAdminOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syncFixedPercentFarms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allocPoints",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_lpTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_withMassPoolUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_syncFixedPercentageFarms",
          "type": "bool"
        }
      ],
      "name": "addMasterApeFarms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_allocPoints",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_withMassPoolUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_syncFixedPercentageFarms",
          "type": "bool"
        }
      ],
      "name": "setMasterApeFarms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPercentage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withMassPoolUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_syncFixedPercentageFarms",
          "type": "bool"
        }
      ],
      "name": "addFixedPercentFarmAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPercentage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withMassPoolUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_syncFixedPercentageFarms",
          "type": "bool"
        }
      ],
      "name": "setFixedPercentFarmAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfFixedPercentFarms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "getTotalAllocationPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    }
  ],
  "bytecode": "0x6080604052600380546001600160a01b0319169055600060065534801561002557600080fd5b506040516125423803806125428339818101604052604081101561004857600080fd5b508051602090910151600061005b6100d6565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100da565b3390565b612459806100e96000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636d42086a116100f957806399b8562c11610097578063e256888f11610071578063e256888f14610614578063e32e22e31461061c578063f2fde38b1461064f578063f92bbd4014610675576101a9565b806399b8562c14610463578063be2f64ed146104c2578063d01ed080146105ee576101a9565b806373425197116100d3578063734251971461042e578063764ef6251461044b5780638da5cb5b14610453578063967ef78d1461045b576101a9565b80636d42086a146103725780637071f0c41461037a578063715018a614610426576101a9565b806337346a3a1161016657806348fe55f61161014057806348fe55f61461028e578063504ef8111461029657806350d58f7e146102c9578063591185631461036a576101a9565b806337346a3a1461026157806338014795146102695780633f53118214610286576101a9565b8063023d94d4146101ae5780630b0329b9146101eb5780630fcf692f1461020f5780631de692d3146102295780632643d6271461025157806331f2895814610259575b600080fd5b6101cb600480360360208110156101c457600080fd5b50356107a1565b604080519384526020840192909252151582820152519081900360600190f35b6101f36107c5565b604080516001600160a01b039092168252519081900360200190f35b6102176107d4565b60408051918252519081900360200190f35b61024f6004803603602081101561023f57600080fd5b50356001600160a01b03166107de565b005b610217610890565b61021761089a565b61024f6108a4565b61024f6004803603602081101561027f57600080fd5b5035610972565b610217610a32565b6101f3610a38565b61024f600480360360808110156102ac57600080fd5b508035906020810135906040810135151590606001351515610a47565b61024f600480360360208110156102df57600080fd5b810190602081018135600160201b8111156102f957600080fd5b82018360208201111561030b57600080fd5b803590602001918460208302840111600160201b8311171561032c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610d86945050505050565b61024f610e1b565b610217610e72565b61024f6004803603604081101561039057600080fd5b810190602081018135600160201b8111156103aa57600080fd5b8201836020820111156103bc57600080fd5b803590602001918460208302840111600160201b831117156103dd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b03169150610e789050565b61024f611043565b6102176004803603602081101561044457600080fd5b50356110e5565b6101f3611103565b6101f3611112565b610217611121565b6104806004803603602081101561047957600080fd5b5035611127565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b61024f600480360360808110156104d857600080fd5b810190602081018135600160201b8111156104f257600080fd5b82018360208201111561050457600080fd5b803590602001918460208302840111600160201b8311171561052557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561057457600080fd5b82018360208201111561058657600080fd5b803590602001918460208302840111600160201b831117156105a757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505050803515159150602001351515611364565b61024f6004803603602081101561060457600080fd5b50356001600160a01b03166115a6565b61021761168c565b61024f6004803603608081101561063257600080fd5b508035906020810135906040810135151590606001351515611692565b61024f6004803603602081101561066557600080fd5b50356001600160a01b03166118e1565b61024f6004803603608081101561068b57600080fd5b810190602081018135600160201b8111156106a557600080fd5b8201836020820111156106b757600080fd5b803590602001918460208302840111600160201b831117156106d857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561072757600080fd5b82018360208201111561073957600080fd5b803590602001918460208302840111600160201b8311171561075a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050508035151591506020013515156119d9565b60056020526000908152604090208054600182015460029092015490919060ff1683565b6001546001600160a01b031681565b600a6127105b0481565b6107e6611cc7565b6000546001600160a01b03908116911614610836576040805162461bcd60e51b815260206004820181905260248201526000805160206123bb833981519152604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b03838116919091179182905560408051929091168252517f4e24d2bdf029d594c721d76f1f427a0277ec76d150e7e4d665955a2b78f01e33916020908290030190a150565b60046127106107da565b6006546109c40190565b6003546001600160a01b031633146108f7576040805162461bcd60e51b81526020600482015260116024820152703737ba103832b73234b7339037bbb732b960791b604482015290519081900360640190fd5b6002546003546040805163f2fde38b60e01b81526001600160a01b0392831660048201529051919092169163f2fde38b91602480830192600092919082900301818387803b15801561094857600080fd5b505af115801561095c573d6000803e3d6000fd5b5050600380546001600160a01b03191690555050565b61097a611cc7565b6000546001600160a01b039081169116146109ca576040805162461bcd60e51b815260206004820181905260248201526000805160206123bb833981519152604482015290519081900360640190fd5b60025460408051632fff30a360e11b81526004810184905290516001600160a01b0390921691635ffe61469160248082019260009290919082900301818387803b158015610a1757600080fd5b505af1158015610a2b573d6000803e3d6000fd5b5050505050565b61196481565b6002546001600160a01b031681565b6001546001600160a01b03163314610a94576040805162461bcd60e51b815260206004820152601c6024820152600080516020612357833981519152604482015290519081900360640190fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b505050506040513d6020811015610b0c57600080fd5b50518410610b4b5760405162461bcd60e51b81526004018080602001828103825260218152602001806123db6021913960400191505060405180910390fd5b83610b875760405162461bcd60e51b81526004018080602001828103825260238152602001806123776023913960400191505060405180910390fd5b60008481526005602052604090206002015460ff1615610bee576040805162461bcd60e51b815260206004820181905260248201527f66697865642070657263656e74206661726d20616c7265616479206164646564604482015290519081900360640190fd5b600654600090610bfe9085611ccb565b9050611964811115610c57576040805162461bcd60e51b815260206004820152601860248201527f616c6c6f636174696f6e206f7574206f6620626f756e64730000000000000000604482015290519081900360640190fd5b6006819055604080516060810182528681526020808201878152600183850181815260008b81526005855286812095518655925185830155516002909401805460ff19169415159490941790935560048054938401815590527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091018790558151868152915187927fe189b71b104a634f2a39080757eda5ebcc40b9cbd276eb27dc0e17edbe2dc79392908290030190a28215610d7857600260009054906101000a90046001600160a01b03166001600160a01b031663630b5ba16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d5f57600080fd5b505af1158015610d73573d6000803e3d6000fd5b505050505b8115610a2b57610a2b611d2e565b60005b8151811015610e175760025482516001600160a01b03909116906351eb05a690849084908110610db557fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610df357600080fd5b505af1158015610e07573d6000803e3d6000fd5b505060019092019150610d899050565b5050565b6001546001600160a01b03163314610e68576040805162461bcd60e51b815260206004820152601c6024820152600080516020612357833981519152604482015290519081900360640190fd5b610e70611d2e565b565b60065481565b610e80611cc7565b6000546001600160a01b03908116911614610ed0576040805162461bcd60e51b815260206004820181905260248201526000805160206123bb833981519152604482015290519081900360640190fd5b60005b825181101561103e576000838281518110610eea57fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d6020811015610f6d57600080fd5b50516040805163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905291519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610fc557600080fd5b505af1158015610fd9573d6000803e3d6000fd5b505050506040513d6020811015610fef57600080fd5b50506040805182815290516001600160a01b0380851692908716917f58731823bcac65ecb95d39668d6b6a69a9c9b01156841220fc40d9eede89f81e9181900360200190a35050600101610ed3565b505050565b61104b611cc7565b6000546001600160a01b0390811691161461109b576040805162461bcd60e51b815260206004820181905260248201526000805160206123bb833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600481815481106110f257fe5b600091825260209091200154905081565b6003546001600160a01b031681565b6000546001600160a01b031690565b60045490565b600080600080600080600080600260009054906101000a90046001600160a01b03166001600160a01b0316638aa285506040518163ffffffff1660e01b815260040160206040518083038186803b15801561118157600080fd5b505afa158015611195573d6000803e3d6000fd5b505050506040513d60208110156111ab57600080fd5b5051600254604080516303aaf05b60e11b815290516001600160a01b0390921691630755e0b691600480820192602092909190829003018186803b1580156111f257600080fd5b505afa158015611206573d6000803e3d6000fd5b505050506040513d602081101561121c57600080fd5b505160025460408051632f380b3560e01b8152600481018e905290519390920293506001600160a01b031691632f380b3591602480820192608092909190829003018186803b15801561126e57600080fd5b505afa158015611282573d6000803e3d6000fd5b505050506040513d608081101561129857600080fd5b508051602091820151600254604080516317caf6f160e01b81529051939c50919a506001600160a01b0316926317caf6f192600480840193829003018186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d602081101561130e57600080fd5b5051955061132e8661132889670de0b6b3a7640000612092565b906120eb565b9450611346670de0b6b3a76400006113288388612092565b9350836104b002601802925082601e02915050919395979092949650565b6001546001600160a01b031633146113b1576040805162461bcd60e51b815260206004820152601c6024820152600080516020612357833981519152604482015290519081900360640190fd5b82518451146113ff576040805162461bcd60e51b81526020600482015260156024820152740c2e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b604482015290519081900360640190fd5b811561146e57600260009054906101000a90046001600160a01b03166001600160a01b031663630b5ba16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b505050505b60005b84518110156115915760025485516001600160a01b0390911690631eaaa0459087908490811061149d57fe5b60200260200101518684815181106114b157fe5b602002602001015160006040518463ffffffff1660e01b815260040180848152602001836001600160a01b0316815260200182151581526020019350505050600060405180830381600087803b15801561150a57600080fd5b505af115801561151e573d6000803e3d6000fd5b5050505083818151811061152e57fe5b60200260200101516001600160a01b03167f870ca13a686db78882bce0c844dfc9507f10d43d56e9abedcaf29c13321bac0586838151811061156c57fe5b60200260200101516040518082815260200191505060405180910390a2600101611471565b5080156115a0576115a0611d2e565b50505050565b6001546001600160a01b031633146115f3576040805162461bcd60e51b815260206004820152601c6024820152600080516020612357833981519152604482015290519081900360640190fd5b6001600160a01b0381166116385760405162461bcd60e51b81526004018080602001828103825260288152602001806123fc6028913960400191505060405180910390fd5b600180546001600160a01b038381166001600160a01b03198316179283905560405191811692169082907fe26b86b59af1ab12a8e5cd4068e9f64c19ef575cf3bf30bf37b92fef2a20411390600090a35050565b61271081565b6001546001600160a01b031633146116df576040805162461bcd60e51b815260206004820152601c6024820152600080516020612357833981519152604482015290519081900360640190fd5b6000848152600560205260409020600281015460ff1661173d576040805162461bcd60e51b81526020600482015260146024820152731b9bdd0818481d985b1a590819985c9b481c1a5960621b604482015290519081900360640190fd5b6000611762826001015461175c60065488611ccb90919063ffffffff16565b9061212d565b90506119648111156117bb576040805162461bcd60e51b815260206004820152601c60248201527f6e657720616c6c6f636174696f6e206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b600681905560018201805490869055856118215760028301805460ff1916905560005b60045481101561181f5787600482815481106117f657fe5b906000526020600020015414156118175761181281600461216f565b61181f565b6001016117de565b505b6040805182815260208101889052815189927fa23c6176b0c16652f1119ebe6593b1610c0c711b05167b035697e3269e9cf807928290030190a284156118ca57600260009054906101000a90046001600160a01b03166001600160a01b031663630b5ba16040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118b157600080fd5b505af11580156118c5573d6000803e3d6000fd5b505050505b83156118d8576118d8611d2e565b50505050505050565b6118e9611cc7565b6000546001600160a01b03908116911614611939576040805162461bcd60e51b815260206004820181905260248201526000805160206123bb833981519152604482015290519081900360640190fd5b6001600160a01b03811661197e5760405162461bcd60e51b81526004018080602001828103825260268152602001806123316026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314611a26576040805162461bcd60e51b815260206004820152601c6024820152600080516020612357833981519152604482015290519081900360640190fd5b8251845114611a74576040805162461bcd60e51b81526020600482015260156024820152740c2e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b604482015290519081900360640190fd5b8115611ae357600260009054906101000a90046001600160a01b03166001600160a01b031663630b5ba16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611aca57600080fd5b505af1158015611ade573d6000803e3d6000fd5b505050505b6002546040805163040f1f6d60e11b815290516000926001600160a01b03169163081e3eda916004808301926020929190829003018186803b158015611b2857600080fd5b505afa158015611b3c573d6000803e3d6000fd5b505050506040513d6020811015611b5257600080fd5b5051905060005b8551811015611cb85781868281518110611b6f57fe5b602002602001015110611bb35760405162461bcd60e51b81526004018080602001828103825260218152602001806123db6021913960400191505060405180910390fd5b60025486516001600160a01b03909116906364482f7990889084908110611bd657fe5b6020026020010151878481518110611bea57fe5b602002602001015160006040518463ffffffff1660e01b81526004018084815260200183815260200182151581526020019350505050600060405180830381600087803b158015611c3a57600080fd5b505af1158015611c4e573d6000803e3d6000fd5b50505050858181518110611c5e57fe5b60200260200101517fd8b0081f42858568e33a7435c4eeff8797c209bf07c874d76ef281a0178d8251868381518110611c9357fe5b60200260200101516040518082815260200191505060405180910390a2600101611b59565b508115610a2b57610a2b611d2e565b3390565b600082820183811015611d25576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b611d36611121565b611d3f57610e70565b600254604080516317caf6f160e01b815290516000926001600160a01b0316916317caf6f1916004808301926020929190829003018186803b158015611d8457600080fd5b505afa158015611d98573d6000803e3d6000fd5b505050506040513d6020811015611dae57600080fd5b505160025460408051632f380b3560e01b8152600060048201819052915193945090926001600160a01b0390921691632f380b3591602480820192608092909190829003018186803b158015611e0357600080fd5b505afa158015611e17573d6000803e3d6000fd5b505050506040513d6080811015611e2d57600080fd5b506020015190506000805b600454811015611eeb57600254600480546000926001600160a01b031691632f380b359185908110611e6657fe5b90600052602060002001546040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b158015611ea557600080fd5b505afa158015611eb9573d6000803e3d6000fd5b505050506040513d6080811015611ecf57600080fd5b50602001519050611ee08382611ccb565b925050600101611e38565b506000611efc8261175c868661212d565b90506000611f14611f0b61089a565b6127109061212d565b6305f5e10081611f2057fe5b0490506000611f356127106113288585612092565b90506000611f43828561212d565b905060005b60045481101561208857611f5a61230d565b6005600060048481548110611f6b57fe5b6000918252602080832090910154835282810193909352604091820181208251606081018452815481526001820154948101949094526002015460ff16151591830191909152909150611fcf611fbf61089a565b6020840151611328908790612092565b6002548351604080516364482f7960e01b815260048101929092526024820184905260006044830181905290519394506001600160a01b03909216926364482f799260648084019391929182900301818387803b15801561202f57600080fd5b505af1158015612043573d6000803e3d6000fd5b505083516040805185815290519193507faf6de0e99985e2141e73432bf0e3b3ca80f31561c97ef2fb113614913d5a76cd925081900360200190a25050600101611f48565b5050505050505050565b6000826120a157506000611d28565b828202828482816120ae57fe5b0414611d255760405162461bcd60e51b815260040180806020018281038252602181526020018061239a6021913960400191505060405180910390fd5b6000611d2583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612211565b6000611d2583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506122b3565b805482106121b6576040805162461bcd60e51b815260206004820152600f60248201526e092dcc6dee4e4cac6e840d2dcc8caf608b1b604482015290519081900360640190fd5b8054819060001981019081106121c857fe5b90600052602060002001548183815481106121df57fe5b9060005260206000200181905550808054806121f757fe5b600190038181906000526020600020016000905590555050565b6000818361229d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561226257818101518382015260200161224a565b50505050905090810190601f16801561228f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816122a957fe5b0495945050505050565b600081848411156123055760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561226257818101518382015260200161224a565b505050900390565b60405180606001604052806000815260200160008152602001600015158152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736d7573742062652063616c6c6564206279206661726d2061646d696e0000000063616e6e6f7420616464207265736572766564204d6173746572417065207069642030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572706964206973206f7574206f6620626f756e6473206f66204d617374657241706563616e6e6f74207472616e73666572206661726d2061646d696e20746f2061646472657373283029a264697066735822122073206e0a771c6976d715be3ccfca570e58737a56bf02d6d777dfdc490a2f06d364736f6c634300060c0033",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n/*\n * ApeSwapFinance\n * App:             https://apeswap.finance\n * Medium:          https://medium.com/@ape_swap\n * Twitter:         https://twitter.com/ape_swap\n * Telegram:        https://t.me/ape_swap\n * Announcements:   https://t.me/ape_swap_news\n * GitHub:          https://github.com/ApeSwapFinance\n */\n\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IMasterApe.sol\";\n\n/// @title Admin MasterApe proxy contract used to add features to MasterApe admin functions\n/// @dev This contract does NOT handle changing the dev address of the MasterApe because that can only be done\n///  by the dev address itself\n/// @author DeFiFoFum (Apetastic)\n/// @notice Admin functions are separated into onlyOwner and onlyFarmAdmin to separate concerns\ncontract MasterApeAdmin is Ownable {\n    using SafeMath for uint256;\n\n    struct FixedPercentFarmInfo {\n        uint256 pid;\n        uint256 allocationPercent;\n        bool isActive;\n    }\n\n    /// @notice Farm admin can manage master ape farms and fixed percent farms\n    address public farmAdmin;\n    /// @notice MasterApe Address\n    IMasterApe public masterApe;\n    /// @notice Address which is eligible to accept ownership of the MasterApe. Set by the current owner.\n    address public pendingMasterApeOwner = address(0);\n    /// @notice Array of MasterApe pids that are active fixed percent farms\n    uint256[] public fixedPercentFarmPids;\n    /// @notice mapping of MasterApe pids to FixedPercentFarmInfo\n    mapping(uint256 => FixedPercentFarmInfo) public getFixedPercentFarmFromPid;\n    /// @notice The percentages are divided by 10000\n    uint256 constant public PERCENTAGE_PRECISION = 1e4;\n    /// @notice Percentage of base pool allocation managed by MasterApe internally\n    /// @dev The BASE_PERCENTAGE needs to be considered in fixed percent farm allocation updates as it's allocation is based on a percentage\n    uint256 constant public BASE_PERCENTAGE = PERCENTAGE_PRECISION / 4; // The base staking pool always gets 25%\n    /// @notice Approaching max fixed farm percentage makes the fixed farm allocations go to infinity\n    uint256 constant public MAX_FIXED_FARM_PERCENTAGE_BUFFER = PERCENTAGE_PRECISION / 10; // 10% Buffer\n    /// @notice Percentage available to additional fixed percent farms\n    uint256 constant public MAX_FIXED_FARM_PERCENTAGE = PERCENTAGE_PRECISION - BASE_PERCENTAGE - MAX_FIXED_FARM_PERCENTAGE_BUFFER;\n    /// @notice Total allocation percentage for fixed percent farms\n    uint256 public totalFixedPercentFarmPercentage = 0;\n\n    event SetPendingMasterApeOwner(address pendingMasterApeOwner);\n    event AddFarm(IERC20 indexed lpToken, uint256 allocation);\n    event SetFarm(uint256 indexed pid, uint256 allocation);\n    event SyncFixedPercentFarm(uint256 indexed pid, uint256 allocation);\n    event AddFixedPercentFarm(uint256 indexed pid, uint256 allocationPercentage);\n    event SetFixedPercentFarm(uint256 indexed pid, uint256 previousAllocationPercentage, uint256 allocationPercentage);\n    event TransferredFarmAdmin(address indexed previousFarmAdmin, address indexed newFarmAdmin);\n    event SweepWithdraw(address indexed to, IERC20 indexed token, uint256 amount);\n\n\n    constructor(\n        IMasterApe _masterApe,\n        address _farmAdmin\n    ) public {\n        masterApe = _masterApe;\n        farmAdmin = _farmAdmin;\n    }\n\n    modifier onlyFarmAdmin() {\n        require(msg.sender == farmAdmin, \"must be called by farm admin\");\n        _;\n    }\n\n    /** External Functions  */\n\n    /// @notice Set an address as the pending admin of the MasterApe. The address must accept afterward to take ownership.\n    /// @param _pendingMasterApeOwner Address to set as the pending owner of the MasterApe.\n    function setPendingMasterApeOwner(address _pendingMasterApeOwner) external onlyOwner {\n        pendingMasterApeOwner = _pendingMasterApeOwner;\n        emit SetPendingMasterApeOwner(pendingMasterApeOwner);\n    }\n\n    /// @notice The pendingMasterApeOwner takes ownership through this call\n    /// @dev Transferring MasterApe ownership away from this contract renders this contract useless. \n    function acceptMasterApeOwnership() external {\n        require(msg.sender == pendingMasterApeOwner, \"not pending owner\");\n        masterApe.transferOwnership(pendingMasterApeOwner);\n        pendingMasterApeOwner = address(0);\n    }\n\n    /// @notice Update the rewardPerBlock multiplier on the MasterApe contract\n    /// @param _newMultiplier Multiplier to change to\n    function updateMasterApeMultiplier(uint256 _newMultiplier) external onlyOwner {\n        masterApe.updateMultiplier(_newMultiplier);\n    }\n\n    /// @notice Helper function to update MasterApe pools in batches \n    /// @dev The MasterApe massUpdatePools function uses a for loop which in the future\n    ///  could reach the block gas limit making it incallable. \n    /// @param pids Array of MasterApe pids to update\n    function batchUpdateMasterApePools(uint256[] memory pids) external {\n        for (uint256 pidIndex = 0; pidIndex < pids.length; pidIndex++) {\n            masterApe.updatePool(pids[pidIndex]);\n        }\n    }\n\n    /// @notice Obtain detailed allocation information regarding a MasterApe pool\n    /// @param pid MasterApe pid to pull detailed information from\n    /// @return lpToken Address of the stake token for this pool\n    /// @return poolAllocationPoint Allocation points for this pool\n    /// @return totalAllocationPoints Total allocation points across all pools\n    /// @return poolAllocationPercentMantissa Percentage of pool allocation points to total multiplied by 1e18\n    /// @return poolBananaPerBlock Amount of BANANA given to the pool per block\n    /// @return poolBananaPerDay Amount of BANANA given to the pool per day\n    /// @return poolBananaPerMonth Amount of BANANA given to the pool per month\n    function getDetailedPoolInfo(uint pid) external view returns (\n        address lpToken,\n        uint256 poolAllocationPoint,\n        uint256 totalAllocationPoints,\n        uint256 poolAllocationPercentMantissa,\n        uint256 poolBananaPerBlock,\n        uint256 poolBananaPerDay,\n        uint256 poolBananaPerMonth\n    ) {\n        uint256 bananaPerBlock = masterApe.cakePerBlock() * masterApe.BONUS_MULTIPLIER();\n        ( lpToken, poolAllocationPoint,,) = masterApe.getPoolInfo(pid);\n        totalAllocationPoints = masterApe.totalAllocPoint();\n        poolAllocationPercentMantissa = (poolAllocationPoint.mul(1e18)).div(totalAllocationPoints);\n        poolBananaPerBlock = (bananaPerBlock.mul(poolAllocationPercentMantissa)).div(1e18);\n        // Assumes a 3 second blocktime\n        poolBananaPerDay = poolBananaPerBlock * 1200 * 24;\n        poolBananaPerMonth = poolBananaPerDay * 30;\n    }\n\n    /// @notice A public function to sweep accidental ERC20 transfers to this contract. \n    ///   Tokens are sent to owner\n    /// @param _tokens Array of ERC20 addresses to sweep\n    /// @param _to Address to send tokens to\n    function sweepTokens(IERC20[] memory _tokens, address _to) external onlyOwner {\n        for (uint256 index = 0; index < _tokens.length; index++) {\n            IERC20 token = _tokens[index];\n            uint256 balance = token.balanceOf(address(this));\n            token.transfer(_to, balance);\n            emit SweepWithdraw(_to, token, balance);\n        }\n    }\n\n    /// @notice Transfer the farmAdmin to a new address\n    /// @param _newFarmAdmin Address of new farmAdmin\n    function transferFarmAdminOwnership(address _newFarmAdmin) external onlyFarmAdmin {\n        require(_newFarmAdmin != address(0), 'cannot transfer farm admin to address(0)');\n        address previousFarmAdmin = farmAdmin;\n        farmAdmin = _newFarmAdmin;\n        emit TransferredFarmAdmin(previousFarmAdmin, farmAdmin);\n    }\n\n    /// @notice Update pool allocations based on fixed percentage farm percentages\n    function syncFixedPercentFarms() external onlyFarmAdmin {\n        _syncFixedPercentFarms();\n    }\n\n\n    /// @notice Add a batch of farms to the MasterApe contract\n    /// @dev syncs fixed percentage farms after update\n    /// @param _allocPoints Array of allocation points to set each address\n    /// @param _withMassPoolUpdate Mass update pools before update\n    /// @param _syncFixedPercentageFarms Sync fixed percentage farm allocations\n    function addMasterApeFarms(\n        uint256[] memory _allocPoints,\n        IERC20[] memory _lpTokens,\n        bool _withMassPoolUpdate,\n        bool _syncFixedPercentageFarms\n    ) external onlyFarmAdmin {\n        require(_allocPoints.length == _lpTokens.length, \"array length mismatch\");\n\n        if (_withMassPoolUpdate) {\n            masterApe.massUpdatePools();\n        }\n\n        for (uint256 index = 0; index < _allocPoints.length; index++) {\n            masterApe.add(_allocPoints[index], address(_lpTokens[index]), false);\n            emit AddFarm(_lpTokens[index], _allocPoints[index]);\n        }\n\n        if (_syncFixedPercentageFarms) {\n            _syncFixedPercentFarms();\n        }\n    }\n\n    /// @notice Add a batch of farms to the MasterApe contract\n    /// @dev syncs fixed percentage farms after update\n    /// @param _pids Array of MasterApe pool ids to update\n    /// @param _allocPoints Array of allocation points to set each pid\n    /// @param _withMassPoolUpdate Mass update pools before update\n    /// @param _syncFixedPercentageFarms Sync fixed percentage farm allocations\n    function setMasterApeFarms(\n        uint256[] memory _pids,\n        uint256[] memory _allocPoints,\n        bool _withMassPoolUpdate,\n        bool _syncFixedPercentageFarms\n    ) external onlyFarmAdmin {\n        require(_pids.length == _allocPoints.length, \"array length mismatch\");\n\n        if (_withMassPoolUpdate) {\n            masterApe.massUpdatePools();\n        }\n\n        uint256 pidIndexes = masterApe.poolLength();\n        for (uint256 index = 0; index < _pids.length; index++) {\n            require(_pids[index] < pidIndexes, \"pid is out of bounds of MasterApe\");\n            // Set all pids with no update\n            masterApe.set(_pids[index], _allocPoints[index], false);\n            emit SetFarm(_pids[index], _allocPoints[index]);\n        }\n\n        if (_syncFixedPercentageFarms) {\n            _syncFixedPercentFarms();\n        }\n    }\n\n    /// @notice Add a new fixed percentage farm allocation\n    /// @dev Must be a new MasterApe pid and below the max fixed percentage \n    /// @param _pid MasterApe pid to create a fixed percentage farm for\n    /// @param _allocPercentage Percentage based in PERCENTAGE_PRECISION\n    /// @param _withMassPoolUpdate Mass update pools before update\n    /// @param _syncFixedPercentageFarms Sync fixed percentage farm allocations\n    function addFixedPercentFarmAllocation(\n        uint256 _pid,\n        uint256 _allocPercentage,\n        bool _withMassPoolUpdate,\n        bool _syncFixedPercentageFarms\n    ) external onlyFarmAdmin {\n        require(_pid < masterApe.poolLength(), \"pid is out of bounds of MasterApe\");\n        require(_pid != 0, \"cannot add reserved MasterApe pid 0\");\n        require(!getFixedPercentFarmFromPid[_pid].isActive, \"fixed percent farm already added\");\n        uint256 newTotalFixedPercentage = totalFixedPercentFarmPercentage.add(_allocPercentage);\n        require(newTotalFixedPercentage <= MAX_FIXED_FARM_PERCENTAGE, \"allocation out of bounds\");\n    \n        totalFixedPercentFarmPercentage = newTotalFixedPercentage;\n        getFixedPercentFarmFromPid[_pid] = FixedPercentFarmInfo(_pid, _allocPercentage, true);\n        fixedPercentFarmPids.push(_pid);\n        emit AddFixedPercentFarm(_pid, _allocPercentage);\n       \n        if (_withMassPoolUpdate) {\n            masterApe.massUpdatePools();\n        }\n\n        if (_syncFixedPercentageFarms) {\n            _syncFixedPercentFarms();\n        }\n    }\n\n    /// @notice Update/disable a new fixed percentage farm allocation\n    /// @dev If the farm allocation is 0, then the fixed farm will be disabled, but the allocation will be unchanged.\n    /// @param _pid MasterApe pid linked to fixed percentage farm to update\n    /// @param _allocPercentage Percentage based in PERCENTAGE_PRECISION\n    /// @param _withMassPoolUpdate Mass update pools before update\n    /// @param _syncFixedPercentageFarms Sync fixed percentage farm allocations\n    function setFixedPercentFarmAllocation(\n        uint256 _pid,\n        uint256 _allocPercentage,\n        bool _withMassPoolUpdate,\n        bool _syncFixedPercentageFarms\n    ) external onlyFarmAdmin {\n        FixedPercentFarmInfo storage fixedPercentFarm = getFixedPercentFarmFromPid[_pid];\n        require(fixedPercentFarm.isActive, \"not a valid farm pid\");\n        uint256 newTotalFixedPercentFarmPercentage = _allocPercentage.add(totalFixedPercentFarmPercentage).sub(fixedPercentFarm.allocationPercent);\n        require(newTotalFixedPercentFarmPercentage <= MAX_FIXED_FARM_PERCENTAGE, \"new allocation out of bounds\");\n\n        totalFixedPercentFarmPercentage = newTotalFixedPercentFarmPercentage;\n        uint256 previousAllocation = fixedPercentFarm.allocationPercent;\n        fixedPercentFarm.allocationPercent = _allocPercentage;\n\n        if(_allocPercentage == 0) {\n            // Disable fixed percentage farm and MasterApe allocation\n            fixedPercentFarm.isActive = false;\n            // Remove fixed percent farm from pid array\n            for (uint256 index = 0; index < fixedPercentFarmPids.length; index++) {\n                if(fixedPercentFarmPids[index] == _pid) {\n                    _removeFromArray(index, fixedPercentFarmPids);\n                    break;\n                }\n            }\n            // NOTE: The MasterApe pool allocation is left unchanged to not disable a fixed farm \n            //  in case the creation was an accident.\n        }\n        emit SetFixedPercentFarm(_pid, previousAllocation, _allocPercentage);\n      \n        if (_withMassPoolUpdate) {\n            masterApe.massUpdatePools();\n        }\n\n        if (_syncFixedPercentageFarms) {\n            _syncFixedPercentFarms();\n        }\n    }\n\n    /** Public Functions  */\n\n    /// @notice Get the number of registered fixed percentage farms\n    /// @return Number of active fixed percentage farms \n    function getNumberOfFixedPercentFarms() public view returns (uint256) {\n        return fixedPercentFarmPids.length;\n    }\n\n    /// @notice Get the total percentage allocated to fixed percentage farms on the MasterApe\n    /// @dev Adds the total percent allocated to fixed percentage farms with the percentage allocated to the BANANA pool. \n    ///  The MasterApe manages the BANANA pool internally and we need to account for this when syncing fixed percentage farms.\n    /// @return Total percentage based in PERCENTAGE_PRECISION \n    function getTotalAllocationPercent() public view returns (uint256) {\n        return totalFixedPercentFarmPercentage + BASE_PERCENTAGE;\n    }\n\n\n    /** Internal Functions  */\n\n    /// @notice Run through fixed percentage farm allocations and set MasterApe allocations to match the percentage.\n    /// @dev The MasterApe contract manages the BANANA pool percentage on its own which is accounted for in the calculations below.\n    function _syncFixedPercentFarms() internal {\n        if(getNumberOfFixedPercentFarms() == 0) {\n            return; \n        }\n        uint256 masterApeTotalAllocation = masterApe.totalAllocPoint();\n        ( ,uint256 poolAllocation,,) = masterApe.getPoolInfo(0);\n        uint256 currentTotalFixedPercentFarmAllocation = 0;\n        // Calculate the total allocation points of the fixed percent farms\n        for (uint256 index = 0; index < fixedPercentFarmPids.length; index++) {\n            ( ,uint256 fixedPercentFarmAllocation,,) = masterApe.getPoolInfo(fixedPercentFarmPids[index]);\n            currentTotalFixedPercentFarmAllocation = currentTotalFixedPercentFarmAllocation.add(fixedPercentFarmAllocation);\n        }\n        // Calculate alloted allocations\n        uint256 nonPercentageBasedAllocation = masterApeTotalAllocation.sub(poolAllocation).sub(currentTotalFixedPercentFarmAllocation);\n        uint256 percentageIncrease = (PERCENTAGE_PRECISION * PERCENTAGE_PRECISION) / (PERCENTAGE_PRECISION.sub(getTotalAllocationPercent()));\n        uint256 finalAllocation = nonPercentageBasedAllocation.mul(percentageIncrease).div(PERCENTAGE_PRECISION);\n        uint256 allotedFixedPercentFarmAllocation = finalAllocation.sub(nonPercentageBasedAllocation);\n        // Update fixed percentage farm allocations\n        for (uint256 index = 0; index < fixedPercentFarmPids.length; index++) {\n            FixedPercentFarmInfo memory fixedPercentFarm = getFixedPercentFarmFromPid[fixedPercentFarmPids[index]];\n            uint256 newFixedPercentFarmAllocation = allotedFixedPercentFarmAllocation.mul(fixedPercentFarm.allocationPercent).div(getTotalAllocationPercent());\n            masterApe.set(fixedPercentFarm.pid, newFixedPercentFarmAllocation, false);\n            emit SyncFixedPercentFarm(fixedPercentFarm.pid, newFixedPercentFarmAllocation);\n        }\n    }\n\n    /// @notice Remove an index from an array by copying the last element to the index and then removing the last element.\n    function _removeFromArray(uint index, uint256[] storage array) internal {\n        require(index < array.length, \"Incorrect index\");\n        array[index] = array[array.length-1];\n        array.pop();\n    }\n}\n",
  "sourcePath": "/Users/defifofum/Code/ApeSwap/apeswap-banana-farm/contracts/MasterApeAdmin.sol",
  "compiler": {
    "name": "solc",
    "version": "0.6.12+commit.27d51765.Emscripten.clang"
  },
  "schemaVersion": "3.3.3",
  "updatedAt": "2021-10-06T20:49:05.486Z",
  "networkType": "ethereum",
  "devdoc": {
    "author": "DeFiFoFum (Apetastic)",
    "details": "This contract does NOT handle changing the dev address of the MasterApe because that can only be done  by the dev address itself",
    "kind": "dev",
    "methods": {
      "acceptMasterApeOwnership()": {
        "details": "Transferring MasterApe ownership away from this contract renders this contract useless. "
      },
      "addFixedPercentFarmAllocation(uint256,uint256,bool,bool)": {
        "details": "Must be a new MasterApe pid and below the max fixed percentage ",
        "params": {
          "_allocPercentage": "Percentage based in PERCENTAGE_PRECISION",
          "_pid": "MasterApe pid to create a fixed percentage farm for",
          "_syncFixedPercentageFarms": "Sync fixed percentage farm allocations",
          "_withMassPoolUpdate": "Mass update pools before update"
        }
      },
      "addMasterApeFarms(uint256[],address[],bool,bool)": {
        "details": "syncs fixed percentage farms after update",
        "params": {
          "_allocPoints": "Array of allocation points to set each address",
          "_syncFixedPercentageFarms": "Sync fixed percentage farm allocations",
          "_withMassPoolUpdate": "Mass update pools before update"
        }
      },
      "batchUpdateMasterApePools(uint256[])": {
        "details": "The MasterApe massUpdatePools function uses a for loop which in the future  could reach the block gas limit making it incallable. ",
        "params": {
          "pids": "Array of MasterApe pids to update"
        }
      },
      "getDetailedPoolInfo(uint256)": {
        "params": {
          "pid": "MasterApe pid to pull detailed information from"
        },
        "returns": {
          "lpToken": "Address of the stake token for this pool",
          "poolAllocationPercentMantissa": "Percentage of pool allocation points to total multiplied by 1e18",
          "poolAllocationPoint": "Allocation points for this pool",
          "poolBananaPerBlock": "Amount of BANANA given to the pool per block",
          "poolBananaPerDay": "Amount of BANANA given to the pool per day",
          "poolBananaPerMonth": "Amount of BANANA given to the pool per month",
          "totalAllocationPoints": "Total allocation points across all pools"
        }
      },
      "getNumberOfFixedPercentFarms()": {
        "returns": {
          "_0": "Number of active fixed percentage farms "
        }
      },
      "getTotalAllocationPercent()": {
        "details": "Adds the total percent allocated to fixed percentage farms with the percentage allocated to the BANANA pool.   The MasterApe manages the BANANA pool internally and we need to account for this when syncing fixed percentage farms.",
        "returns": {
          "_0": "Total percentage based in PERCENTAGE_PRECISION "
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFixedPercentFarmAllocation(uint256,uint256,bool,bool)": {
        "details": "If the farm allocation is 0, then the fixed farm will be disabled, but the allocation will be unchanged.",
        "params": {
          "_allocPercentage": "Percentage based in PERCENTAGE_PRECISION",
          "_pid": "MasterApe pid linked to fixed percentage farm to update",
          "_syncFixedPercentageFarms": "Sync fixed percentage farm allocations",
          "_withMassPoolUpdate": "Mass update pools before update"
        }
      },
      "setMasterApeFarms(uint256[],uint256[],bool,bool)": {
        "details": "syncs fixed percentage farms after update",
        "params": {
          "_allocPoints": "Array of allocation points to set each pid",
          "_pids": "Array of MasterApe pool ids to update",
          "_syncFixedPercentageFarms": "Sync fixed percentage farm allocations",
          "_withMassPoolUpdate": "Mass update pools before update"
        }
      },
      "setPendingMasterApeOwner(address)": {
        "params": {
          "_pendingMasterApeOwner": "Address to set as the pending owner of the MasterApe."
        }
      },
      "sweepTokens(address[],address)": {
        "params": {
          "_to": "Address to send tokens to",
          "_tokens": "Array of ERC20 addresses to sweep"
        }
      },
      "transferFarmAdminOwnership(address)": {
        "params": {
          "_newFarmAdmin": "Address of new farmAdmin"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMasterApeMultiplier(uint256)": {
        "params": {
          "_newMultiplier": "Multiplier to change to"
        }
      }
    },
    "stateVariables": {
      "BASE_PERCENTAGE": {
        "details": "The BASE_PERCENTAGE needs to be considered in fixed percent farm allocation updates as it's allocation is based on a percentage"
      }
    },
    "title": "Admin MasterApe proxy contract used to add features to MasterApe admin functions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASE_PERCENTAGE()": {
        "notice": "Percentage of base pool allocation managed by MasterApe internally"
      },
      "MAX_FIXED_FARM_PERCENTAGE()": {
        "notice": "Percentage available to additional fixed percent farms"
      },
      "MAX_FIXED_FARM_PERCENTAGE_BUFFER()": {
        "notice": "Approaching max fixed farm percentage makes the fixed farm allocations go to infinity"
      },
      "PERCENTAGE_PRECISION()": {
        "notice": "The percentages are divided by 10000"
      },
      "acceptMasterApeOwnership()": {
        "notice": "The pendingMasterApeOwner takes ownership through this call"
      },
      "addFixedPercentFarmAllocation(uint256,uint256,bool,bool)": {
        "notice": "Add a new fixed percentage farm allocation"
      },
      "addMasterApeFarms(uint256[],address[],bool,bool)": {
        "notice": "Add a batch of farms to the MasterApe contract"
      },
      "batchUpdateMasterApePools(uint256[])": {
        "notice": "Helper function to update MasterApe pools in batches "
      },
      "farmAdmin()": {
        "notice": "Farm admin can manage master ape farms and fixed percent farms"
      },
      "fixedPercentFarmPids(uint256)": {
        "notice": "Array of MasterApe pids that are active fixed percent farms"
      },
      "getDetailedPoolInfo(uint256)": {
        "notice": "Obtain detailed allocation information regarding a MasterApe pool"
      },
      "getFixedPercentFarmFromPid(uint256)": {
        "notice": "mapping of MasterApe pids to FixedPercentFarmInfo"
      },
      "getNumberOfFixedPercentFarms()": {
        "notice": "Get the number of registered fixed percentage farms"
      },
      "getTotalAllocationPercent()": {
        "notice": "Get the total percentage allocated to fixed percentage farms on the MasterApe"
      },
      "masterApe()": {
        "notice": "MasterApe Address"
      },
      "pendingMasterApeOwner()": {
        "notice": "Address which is eligible to accept ownership of the MasterApe. Set by the current owner."
      },
      "setFixedPercentFarmAllocation(uint256,uint256,bool,bool)": {
        "notice": "Update/disable a new fixed percentage farm allocation"
      },
      "setMasterApeFarms(uint256[],uint256[],bool,bool)": {
        "notice": "Add a batch of farms to the MasterApe contract"
      },
      "setPendingMasterApeOwner(address)": {
        "notice": "Set an address as the pending admin of the MasterApe. The address must accept afterward to take ownership."
      },
      "sweepTokens(address[],address)": {
        "notice": "A public function to sweep accidental ERC20 transfers to this contract.    Tokens are sent to owner"
      },
      "syncFixedPercentFarms()": {
        "notice": "Update pool allocations based on fixed percentage farm percentages"
      },
      "totalFixedPercentFarmPercentage()": {
        "notice": "Total allocation percentage for fixed percent farms"
      },
      "transferFarmAdminOwnership(address)": {
        "notice": "Transfer the farmAdmin to a new address"
      },
      "updateMasterApeMultiplier(uint256)": {
        "notice": "Update the rewardPerBlock multiplier on the MasterApe contract"
      }
    },
    "notice": "Admin functions are separated into onlyOwner and onlyFarmAdmin to separate concerns",
    "version": 1
  }
}